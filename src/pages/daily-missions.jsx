import React, { useState, useEffect } from 'react';
import Lottie from 'lottie-react';
import amiAnimation from '../assets/ami.json';
import { doc, getDoc, updateDoc } from "firebase/firestore";
import { db } from "../firebase";
import { useLocation } from "react-router-dom";
import { toast } from "react-hot-toast";

export default function DailyMissions() {
  const location = useLocation();
  const docId = location.state?.docId;
const lessons = [
    {
      name: "Animals",
      items: [
        { emoji: "üê∂", name: "Dog" },
        { emoji: "üê±", name: "Cat" },
        { emoji: "üê∞", name: "Rabbit" },
        { emoji: "ü¶ú", name: "Parrot" },
        { emoji: "üê¢", name: "Turtle" },
        { emoji: "üê¥", name: "Horse" },
        { emoji: "üêÆ", name: "Cow" },
        { emoji: "üêë", name: "Sheep" },
        { emoji: "ü¶Å", name: "Lion" },
        { emoji: "üê∑", name: "Pig" }
      ]
    },
    {
      name: "Fruits",
      items: [
        { emoji: "üçé", name: "Apple" },
        { emoji: "üçå", name: "Banana" },
        { emoji: "üçá", name: "Grapes" },
        { emoji: "üçâ", name: "Watermelon" },
        { emoji: "üçì", name: "Strawberry" },
        { emoji: "üçç", name: "Pineapple" },
        { emoji: "ü•≠", name: "Mango" },
        { emoji: "üçí", name: "Cherry" },
        { emoji: "ü•ù", name: "Kiwi" },
        { emoji: "üçë", name: "Peach" }
      ]
    },
    {
      name: "Vegetables",
      items: [
        { emoji: "ü•ï", name: "Carrot" },
        { emoji: "üåΩ", name: "Corn" },
        { emoji: "ü•î", name: "Potato" },
        { emoji: "üçÖ", name: "Tomato" },
        { emoji: "ü•í", name: "Cucumber" },
        { emoji: "üßÖ", name: "Onion" },
        { emoji: "ü•¶", name: "Broccoli" },
        { emoji: "üçÜ", name: "Eggplant" },
        { emoji: "ü•¨", name: "Lettuce" },
        { emoji: "ü´ë", name: "Pepper" }
      ]
    },
    {
      name: "Colors",
      items: [
        { emoji: "üî¥", name: "Red" },
        { emoji: "üü†", name: "Orange" },
        { emoji: "üü°", name: "Yellow" },
        { emoji: "üü¢", name: "Green" },
        { emoji: "üîµ", name: "Blue" },
        { emoji: "üü£", name: "Purple" },
        { emoji: "‚ö´", name: "Black" },
        { emoji: "‚ö™", name: "White" },
        { emoji: "üü§", name: "Brown" },
        { emoji: "üåà", name: "Rainbow" }
      ]
    },
    {
      name: "Numbers",
      items: [
        { emoji: "1Ô∏è‚É£", name: "One" },
        { emoji: "2Ô∏è‚É£", name: "Two" },
        { emoji: "3Ô∏è‚É£", name: "Three" },
        { emoji: "4Ô∏è‚É£", name: "Four" },
        { emoji: "5Ô∏è‚É£", name: "Five" },
        { emoji: "6Ô∏è‚É£", name: "Six" },
        { emoji: "7Ô∏è‚É£", name: "Seven" },
        { emoji: "8Ô∏è‚É£", name: "Eight" },
        { emoji: "9Ô∏è‚É£", name: "Nine" },
        { emoji: "üîü", name: "Ten" }
      ]
    },
    {
      name: "Shapes",
      items: [
        { emoji: "‚¨ú", name: "Square" },
        { emoji: "‚ö´", name: "Circle" },
        { emoji: "üî∫", name: "Triangle" },
        { emoji: "‚≠ê", name: "Star" },
        { emoji: "‚ù§Ô∏è", name: "Heart" },
        { emoji: "‚¨õ", name: "Rectangle" },
        { emoji: "üî∑", name: "Diamond" },
        { emoji: "üîµ", name: "Oval" },
        { emoji: "üü™", name: "Pentagon" },
        { emoji: "üü®", name: "Hexagon" }
      ]
    },
    {
      name: "Vehicles",
      items: [
        { emoji: "üöó", name: "Car" },
        { emoji: "üöï", name: "Taxi" },
        { emoji: "üöå", name: "Bus" },
        { emoji: "üöë", name: "Ambulance" },
        { emoji: "üöí", name: "Fire Truck" },
        { emoji: "üöú", name: "Tractor" },
        { emoji: "üö≤", name: "Bicycle" },
        { emoji: "‚úàÔ∏è", name: "Airplane" },
        { emoji: "üöÇ", name: "Train" },
        { emoji: "üõ≥Ô∏è", name: "Ship" }
      ]
    },
    {
      name: "Clothes",
      items: [
        { emoji: "üëï", name: "Shirt" },
        { emoji: "üëñ", name: "Pants" },
        { emoji: "üëó", name: "Dress" },
        { emoji: "üß•", name: "Jacket" },
        { emoji: "üëü", name: "Shoes" },
        { emoji: "üß¢", name: "Cap" },
        { emoji: "üß§", name: "Gloves" },
        { emoji: "üß£", name: "Scarf" },
        { emoji: "ü©≥", name: "Shorts" },
        { emoji: "üëí", name: "Hat" }
      ]
    },
    {
      name: "Body Parts",
      items: [
        { emoji: "üëÄ", name: "Eyes" },
        { emoji: "üëÇ", name: "Ear" },
        { emoji: "üëÉ", name: "Nose" },
        { emoji: "üëÑ", name: "Mouth" },
        { emoji: "‚úã", name: "Hand" },
        { emoji: "ü¶∂", name: "Foot" },
        { emoji: "üß†", name: "Brain" },
        { emoji: "ü´Ä", name: "Heart" },
        { emoji: "ü¶¥", name: "Bone" },
        { emoji: "üëÖ", name: "Tongue" }
      ]
    },
    {
      name: "Daily Items",
      items: [
        { emoji: "ü™•", name: "Toothbrush" },
        { emoji: "üß¥", name: "Soap" },
        { emoji: "üõèÔ∏è", name: "Bed" },
        { emoji: "üçΩÔ∏è", name: "Plate" },
        { emoji: "üìö", name: "Book" },
        { emoji: "üñçÔ∏è", name: "Crayon" },
        { emoji: "ü™ë", name: "Chair" },
        { emoji: "‚è∞", name: "Clock" },
        { emoji: "üéí", name: "Bag" },
        { emoji: "üíß", name: "Water" }
      ]
    }
  ];
 

  const [selectedLesson, setSelectedLesson] = useState(null);
  const [currentItems, setCurrentItems] = useState([]);
  const [currentTarget, setCurrentTarget] = useState(null);
  const [completed, setCompleted] = useState(false);
  const [feedback, setFeedback] = useState('');

  const speak = (text) => {
    window.speechSynthesis.cancel();
    const utter = new SpeechSynthesisUtterance(text);
    utter.pitch = 1;
    utter.rate = 0.9;
    utter.lang = 'en-US';
    window.speechSynthesis.speak(utter);
  };

  useEffect(() => {
    if (selectedLesson && !completed && currentTarget?.name) {
      speak(`Can you find the ${currentTarget.name}? Drag it to me!`);
      setFeedback('');
    }
  }, [currentTarget, completed, selectedLesson]);

  const handleDrop = (item) => {
    if (item.name === currentTarget.name) {
      setFeedback(`üéâ Great job! You found the ${item.name}!`);
      const remaining = currentItems.filter(i => i.name !== item.name);
      if (remaining.length > 0) {
        setTimeout(() => {
          setCurrentItems(remaining);
          setCurrentTarget(remaining[0]);
        }, 1500);
      } else {
        setCompleted(true);
        speak(`Hurray! You completed the ${selectedLesson.name} lesson!`);
        giveStarReward();
      }
    } else {
      setFeedback('‚ùå Try again!');
    }
  };

  const giveStarReward = async () => {
    if (!docId) return;
    try {
      const userRef = doc(db, "users", docId);
      const userSnap = await getDoc(userRef);
      if (userSnap.exists()) {
        const prevStars = userSnap.data().stars || 0;
        await updateDoc(userRef, { stars: prevStars + 1 });
        toast.success("‚≠ê 1 Star added to your rewards!");
      }
    } catch (error) {
      console.error("Failed to update star reward:", error);
    }
  };

  const startLesson = (lesson) => {
    setSelectedLesson(lesson);
    setCurrentItems([...lesson.items]);
    setCurrentTarget(lesson.items[0]);
    setCompleted(false);
    setFeedback('');
  };

  if (!docId) {
    return (
      <div className="text-center mt-10 text-red-600 font-bold">
        ‚ùó No child ID provided. Please login again.
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-100 via-yellow-100 to-pink-100 flex flex-col items-center justify-center p-4 relative">
      <div className="w-32 mb-4 relative z-10">
        <Lottie animationData={amiAnimation} loop />
        <p className="text-sm text-gray-600 mt-2"></p>
      </div>

      {!selectedLesson && (
        <div className="text-center">
          <h2 className="text-xl font-bold text-purple-800 mb-4">Choose a Lesson</h2>
          <div className="grid grid-cols-2 gap-3 max-w-sm mx-auto">
            {lessons.map((lesson) => (
              <button
                key={lesson.name}
                onClick={() => startLesson(lesson)}
                className="bg-purple-300 hover:bg-purple-400 text-white font-bold py-2 px-4 rounded-xl shadow-md"
              >
                {lesson.name}
              </button>
            ))}
          </div>
        </div>
      )}

      {selectedLesson && (
        <>
          {!completed && (
            <div className="text-center mb-4">
              <h2 className="text-xl font-bold text-purple-800">
                Lesson: {selectedLesson.name}
              </h2>
              <p className="text-lg text-purple-700">
                Find: {currentTarget?.emoji} {currentTarget?.name}
              </p>
            </div>
          )}

          <div className="relative w-80 h-80">
            {currentItems.map((item, index) => {
              const angle = (index / currentItems.length) * 2 * Math.PI;
              const x = 120 * Math.cos(angle);
              const y = 120 * Math.sin(angle);
              return (
                <div
                  key={item.name}
                  draggable={!completed}
                  onDragStart={(e) => e.dataTransfer.setData('text/plain', item.name)}
                  className="absolute text-4xl cursor-grab transition-transform hover:scale-125"
                  style={{ left: `calc(50% + ${x}px)`, top: `calc(50% + ${y}px)` }}
                >
                  {item.emoji}
                </div>
              );
            })}
          </div>

          {!completed && (
            <div
              className="mt-6 w-32 h-32 border-4 border-dashed border-purple-400 rounded-full flex items-center justify-center text-center"
              onDragOver={(e) => e.preventDefault()}
              onDrop={(e) => {
                const name = e.dataTransfer.getData('text/plain');
                const found = currentItems.find((i) => i.name === name);
                if (found) handleDrop(found);
              }}
            >
              <p className="text-purple-600">Drop Here!</p>
            </div>
          )}

          {feedback && (
            <p className="mt-4 text-lg text-green-700">{feedback}</p>
          )}

          {completed && (
            <div className="mt-6 text-center">
              <h2 className="text-2xl font-bold text-purple-800">üéâ You finished the lesson!</h2>
              <button
                onClick={() => setSelectedLesson(null)}
                className="mt-4 bg-purple-500 hover:bg-purple-600 text-white font-semibold px-4 py-2 rounded-full shadow"
              >
                üîÅ Choose Another Lesson
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
}
